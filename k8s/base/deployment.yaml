# =================================================================
# MoonTV Kubernetes 部署配置
# 版本: v4.0.0 - 企业级部署管理
# =================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: moontv-deployment
  namespace: moontv
  labels:
    app.kubernetes.io/name: moontv
    app.kubernetes.io/version: "4.0.0"
    app.kubernetes.io/component: app
    app.kubernetes.io/managed-by: manual
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "MoonTV application deployment"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: moontv
      app.kubernetes.io/component: app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: moontv
        app.kubernetes.io/version: "4.0.0"
        app.kubernetes.io/component: app
        app.kubernetes.io/managed-by: manual
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      # 安全上下文
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault

      # 服务账户
      serviceAccountName: moontv-service-account

      # 镜像拉取密钥
      imagePullSecrets:
        - name: ghcr-secret

      # 初始化容器
      initContainers:
        - name: wait-for-redis
          image: redis:7-alpine
          command:
            - sh
            - -c
            - |
              echo "Waiting for Redis..."
              timeout 60 sh -c 'until redis-cli -h moontv-redis-service -p 6379 ping; do sleep 1; done'
              echo "Redis is ready"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

      # 应用容器
      containers:
        - name: moontv-app
          image: ghcr.io/your-repo/moontv:4.0.0
          imagePullPolicy: IfNotPresent

          # 端口配置
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP

          # 环境变量
          env:
            # 基础配置
            - name: NODE_ENV
              value: "production"
            - name: DOCKER_ENV
              value: "true"
            - name: TZ
              value: "Asia/Shanghai"

            # 应用配置
            - name: NEXT_PUBLIC_SITE_NAME
              value: "MoonTV"
            - name: NEXT_PUBLIC_STORAGE_TYPE
              value: "redis"

            # 数据库配置
            - name: REDIS_URL
              value: "redis://moontv-redis-service:6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: password

            # 应用密钥
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: moontv-secrets
                  key: app-password
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: moontv-secrets
                  key: jwt-secret

            # 构建信息
            - name: APP_VERSION
              value: "4.0.0"
            - name: BUILD_DATE
              value: "2025-10-08T00:00:00Z"
            - name: VCS_REF
              value: "v4.0.0"

            # 第三方服务
            - name: UPSTASH_URL
              valueFrom:
                secretKeyRef:
                  name: moontv-env-secrets
                  key: upstash-url
            - name: UPSTASH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: moontv-env-secrets
                  key: upstash-token

            # 监控配置
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: moontv-env-secrets
                  key: sentry-dsn

          # 资源配置
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"

          # 健康检查
          startupProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 6
            successThreshold: 1

          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1

          readinessProbe:
            httpGet:
              path: /api/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          # 安全配置
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          # 卷挂载
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
              readOnly: true
            - name: secrets-volume
              mountPath: /app/secrets
              readOnly: true
            - name: tmp-volume
              mountPath: /tmp
            - name: logs-volume
              mountPath: /app/logs

          # 生命周期
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "echo 'Pod is terminating' && sleep 15"]

        # Redis容器（Sidecar模式 - 可选）
        - name: redis-sidecar
          image: redis:7-alpine
          command:
            - redis-server
            - --save
            - ""
            - --appendonly
            - "no"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: password
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

      # 卷配置
      volumes:
        - name: config-volume
          configMap:
            name: moontv-config
            items:
              - key: config.json
                path: config.json

        - name: secrets-volume
          secret:
            secretName: moontv-secrets
            optional: true

        - name: tmp-volume
          emptyDir: {}

        - name: logs-volume
          emptyDir:
            sizeLimit: 100Mi

      # 节点选择
      nodeSelector:
        kubernetes.io/os: linux

      # 容忍度
      tolerations:
        - key: "dedicated"
          operator: "Equal"
          value: "moontv"
          effect: "NoSchedule"

      # 亲和性
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - moontv
                topologyKey: kubernetes.io/hostname

---
# Redis部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: moontv-redis-deployment
  namespace: moontv
  labels:
    app.kubernetes.io/name: moontv
    app.kubernetes.io/component: redis
    app.kubernetes.io/managed-by: manual
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: moontv
      app.kubernetes.io/component: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: moontv
        app.kubernetes.io/component: redis
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999

      containers:
        - name: redis
          image: redis:7-alpine
          command:
            - redis-server
            - /etc/redis/redis.conf
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
            - name: TZ
              value: "Asia/Shanghai"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis
              readOnly: true
            - name: redis-data
              mountPath: /data
            - name: redis-secrets
              mountPath: /etc/redis/secrets
              readOnly: true
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

        # Redis Exporter
        - name: redis-exporter
          image: oliver006/redis_exporter:latest
          ports:
            - name: metrics
              containerPort: 9121
              protocol: TCP
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:6379"
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: password
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

      volumes:
        - name: redis-config
          configMap:
            name: redis-config
        - name: redis-data
          persistentVolumeClaim:
            claimName: moontv-redis-pvc
        - name: redis-secrets
          secret:
            secretName: redis-auth

      nodeSelector:
        kubernetes.io/os: linux

---
# Nginx部署
apiVersion: apps/v1
kind: Deployment
metadata:
  name: moontv-nginx-deployment
  namespace: moontv
  labels:
    app.kubernetes.io/name: moontv
    app.kubernetes.io/component: nginx
    app.kubernetes.io/managed-by: manual
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: moontv
      app.kubernetes.io/component: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: moontv
        app.kubernetes.io/component: nginx
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101

      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx
              readOnly: true
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
            - name: nginx-logs
              mountPath: /var/log/nginx
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

        # Nginx Exporter
        - name: nginx-exporter
          image: nginx/nginx-prometheus-exporter:latest
          ports:
            - name: metrics
              containerPort: 9113
              protocol: TCP
          env:
            - name: NGINX_SCHEME
              value: "http"
            - name: NGINX_HOST
              value: "localhost"
            - name: NGINX_PORT
              value: "80"
            - name: NGINX_METRICS_PATH
              value: "/metrics"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: nginx-cache
          emptyDir:
            sizeLimit: 100Mi
        - name: nginx-run
          emptyDir:
            sizeLimit: 10Mi
        - name: nginx-logs
          emptyDir:
            sizeLimit: 100Mi

      nodeSelector:
        kubernetes.io/os: linux

---
# 服务账户
apiVersion: v1
kind: ServiceAccount
metadata:
  name: moontv-service-account
  namespace: moontv
  labels:
    app.kubernetes.io/name: moontv
    app.kubernetes.io/component: service-account
    app.kubernetes.io/managed-by: manual
  annotations:
    description: "Service account for MoonTV application"
automountServiceAccountToken: true

---
# 角色定义
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: moontv-role
  namespace: moontv
  labels:
    app.kubernetes.io/name: moontv
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: manual
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]

---
# 角色绑定
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: moontv-role-binding
  namespace: moontv
  labels:
    app.kubernetes.io/name: moontv
    app.kubernetes.io/component: rbac
    app.kubernetes.io/managed-by: manual
subjects:
  - kind: ServiceAccount
    name: moontv-service-account
    namespace: moontv
roleRef:
  kind: Role
  name: moontv-role
  apiGroup: rbac.authorization.k8s.io