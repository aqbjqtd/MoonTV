# =================================================================
# MoonTV 极致优化 Dockerfile
# 基于DevOps最佳实践和多阶段构建优化
# =================================================================

# ---- 第1阶段：依赖安装器 ----
# 使用最小化的Alpine Linux + Node.js 20.10.0（项目指定版本）
FROM node:20.10.0-alpine AS deps

# 安全更新和基础工具安装
RUN apk update && apk upgrade && \
    apk add --no-cache libc6-compat dumb-init && \
    rm -rf /var/cache/apk/*

# 启用corepack并锁定pnpm版本（与项目一致）
RUN corepack enable && corepack prepare pnpm@10.14.0 --activate

# 设置工作目录
WORKDIR /app

# 创建pnpm存储目录以优化缓存
RUN mkdir -p /root/.local/share/pnpm/store && \
    chown -R node:node /root/.local

# 切换到非root用户进行依赖安装
RUN addgroup -g 1001 -S nodejs && \
    adduser -u 1001 -S nodeuser -G nodejs
USER nodeuser

# 仅复制依赖文件以最大化Docker层缓存效率
COPY --chown=nodeuser:nodejs package.json pnpm-lock.yaml .npmrc ./

# 配置pnpm以使用优化的存储位置
ENV PNPM_STORE_DIR=/root/.local/share/pnpm/store

# 安装依赖项 - 使用frozen-lockfile确保可重复构建
# --prefer-frozen-lockfile 确保与lockfile一致
# --prod=false 安装所有依赖（包括devDependencies，构建阶段需要）
RUN pnpm install --frozen-lockfile --prefer-frozen-lockfile

# ---- 第2阶段：构建器 ----
FROM node:20.10.0-alpine AS builder

# 安装构建时需要的系统依赖
RUN apk update && apk upgrade && \
    apk add --no-cache libc6-compat python3 make g++ && \
    rm -rf /var/cache/apk/*

# 启用corepack和pnpm
RUN corepack enable && corepack prepare pnpm@10.14.0 --activate

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -u 1001 -S nextjs -G nodejs

WORKDIR /app

# 复制依赖（从deps阶段）
COPY --from=deps --chown=nextjs:nodejs /app/node_modules ./node_modules

# 复制源代码
COPY --chown=nextjs:nodejs . .

# 设置构建环境变量
ENV NODE_ENV=production
ENV DOCKER_ENV=true
ENV NEXT_TELEMETRY_DISABLED=1
ENV PNPM_HOME=/root/.local/share/pnpm

# 生成必要的配置文件
RUN pnpm gen:manifest && pnpm gen:runtime

# 构建应用 - 使用standalone模式以最小化运行时镜像
# 注意：MoonTV配置了standalone输出，因此构建后可独立运行
RUN pnpm build

# 清理不需要的文件以减小镜像大小
RUN cd /app/.next && \
    rm -rf cache traces standalone/server.js && \
    find . -name "*.log" -delete && \
    find . -name "*.tsbuildinfo" -delete

# ---- 第3阶段：生产运行时 ----
# 使用最小化的distroless镜像以增强安全性
# 如果需要调试功能，可以改用 node:20.10.0-alpine
FROM gcr.io/distroless/nodejs20-debian12 AS runner

# 设置工作目录
WORKDIR /app

# 设置环境变量
ENV NODE_ENV=production
ENV DOCKER_ENV=true
ENV HOSTNAME=0.0.0.0
ENV PORT=3000
ENV NEXT_TELEMETRY_DISABLED=1

# 复制必要的文件（从构建阶段）
COPY --from=builder --chown=1001:1001 /app/.next/standalone ./
COPY --from=builder --chown=1001:1001 /app/.next/static ./.next/static
COPY --from=builder --chown=1001:1001 /app/public ./public
COPY --from=builder --chown=1001:1001 /app/config.json ./config.json
COPY --from=builder --chown=1001:1001 /app/scripts ./scripts
COPY --from=builder --chown=1001:1001 /app/start.js ./start.js

# 切换到非特权用户
USER 1001:1001

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD node --eval "require('http').get('http://localhost:3000/login', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# 使用dumb-init作为PID 1，正确处理信号
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# 启动应用
CMD ["node", "start.js"]